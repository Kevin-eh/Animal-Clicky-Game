{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/Headertest/index.js","components/FriendCard/index.js","App.js","index.js"],"names":["Wrapper","props","className","children","Title","HeaderTest","FriendCard","onClick","didAClick","id","alt","src","image","correctGuesses","bestScore","clickMessage","App","state","friends","clickedMatch","filter","clicked","console","log","i","length","setState","sort","a","b","Math","random","Headertest","this","map","friend","key","Component","ReactDOM","render","document","getElementById"],"mappings":"+6EAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCG1BC,MAJf,SAAeH,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,aCQvBE,MAVf,WACE,OACE,yBAAKH,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,Y,MCgCNI,MAxBf,SAAoBL,GAClB,OACE,yBACEM,QAAS,WACPN,EAAMO,UAAUP,EAAMQ,KAExBP,UAAU,QAEV,yBAAKA,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKQ,IAAKT,EAAMQ,GAAIE,IAAKV,EAAMW,YClBrCC,EAAiB,EACjBC,EAAY,EACZC,EACF,0HA0GaC,E,2MAtGbC,MAAQ,CACNC,UACAL,iBACAC,YACAC,gB,EAGFP,UAAY,SAAAC,GACV,IAAMS,EAAU,EAAKD,MAAMC,QAErBC,EAAeD,EAAQE,QAAO,SAAAF,GAAO,OAAIA,EAAQT,KAAOA,KAE9D,GAAIU,EAAa,GAAGE,QAAS,CAC3BC,QAAQC,IAAI,oBAAsBV,GAClCS,QAAQC,IAAI,eAAiBT,GAE7BD,EAAiB,EACjBE,EAAe,qCAEf,IAAK,IAAIS,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IAClCN,EAAQM,GAAGH,SAAU,EAGvB,EAAKK,SAAS,CAAEX,iBAChB,EAAKW,SAAS,CAAEb,mBAChB,EAAKa,SAAS,CAAER,iBAGX,GAAIL,EAAiB,GAE1BM,EAAa,GAAGE,SAAU,EAG1BR,IAEAE,EAAe,iBAEXF,EAAiBC,IACnBA,EAAYD,EACZ,EAAKa,SAAS,CAAEZ,eAIlBI,EAAQS,MAAK,SAASC,EAAGC,GACvB,MAAO,GAAMC,KAAKC,YAIpB,EAAKL,SAAS,CAAER,YAChB,EAAKQ,SAAS,CAAEb,mBAChB,EAAKa,SAAS,CAAEX,qBACX,CAELI,EAAa,GAAGE,SAAU,EAG1BR,EAAiB,EAGjBE,EAAe,4CACfD,EAAY,GACZ,EAAKY,SAAS,CAAEZ,cAEhB,IAAK,IAAIU,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IAClCN,EAAQM,GAAGH,SAAU,EAIvBH,EAAQS,MAAK,SAASC,EAAGC,GACvB,MAAO,GAAMC,KAAKC,YAIpB,EAAKL,SAAS,CAAER,YAChB,EAAKQ,SAAS,CAAEb,mBAChB,EAAKa,SAAS,CAAEX,mB,wEAKV,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAACiB,EAAD,MACA,kBAAC,EAAD,KACE,2BAAIjB,GACJ,6CAAmBF,EAAnB,KACA,0CAAgBC,IAEjBmB,KAAKhB,MAAMC,QAAQgB,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACE3B,UAAW,EAAKA,UAChBC,GAAI0B,EAAO1B,GACX2B,IAAKD,EAAO1B,GACZG,MAAOuB,EAAOvB,gB,GAhGRyB,a,MCPlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7ec4ac92.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\r\nimport \"./style.css\";\r\nfunction HeaderTest() {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Animal Clicky Game</h1>\r\n        <p className=\"lead\"></p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default HeaderTest;\r\n","import React from \"react\";\nimport \"./style.css\";\n\n// // function FriendCard(props) {\n// //   return (\n// //     <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n// //       <div className=\"card\">\n// //         <div className=\"img-container\">\n// //           <img alt={props.name} src={props.image} />\n// //         </div>\n// //       </div>\n// //     </span>\n// //   );\n// // }\n\nfunction FriendCard(props) {\n  return (\n    <div\n      onClick={() => {\n        props.didAClick(props.id);\n      }}\n      className=\"test\"\n    >\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.id} src={props.image} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// const FriendCard = props => (\n//   <div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\n//     <div className=\"img-container\">\n//       <img alt={props.name} src={props.image} />\n//     </div>\n//   </div>\n// );\nexport default FriendCard;\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport Headertest from \"./components/Headertest\";\nimport FriendCard from \"./components/FriendCard\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage =\n  \"See if you can click each villager without clicking the same one more than once! Careful, they'll scatter when clicked!\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  };\n\n  didAClick = id => {\n    const friends = this.state.friends;\n\n    const clickedMatch = friends.filter(friends => friends.id === id);\n\n    if (clickedMatch[0].clicked) {\n      console.log(\"Correct Guesses: \" + correctGuesses);\n      console.log(\"Best Score: \" + bestScore);\n\n      correctGuesses = 0;\n      clickMessage = \"Oops! You've already clicked them!\";\n\n      for (let i = 0; i < friends.length; i++) {\n        friends[i].clicked = false;\n      }\n\n      this.setState({ clickMessage });\n      this.setState({ correctGuesses });\n      this.setState({ friends });\n\n      // Otherwise, if clicked = false, and the user hasn't finished\n    } else if (correctGuesses < 11) {\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n\n      // increment the appropriate counter\n      correctGuesses++;\n\n      clickMessage = \"Good Clicking!\";\n\n      if (correctGuesses > bestScore) {\n        bestScore = correctGuesses;\n        this.setState({ bestScore });\n      }\n\n      // Shuffle the array to be rendered in a random order\n      friends.sort(function(a, b) {\n        return 0.5 - Math.random();\n      });\n\n      // Set this.state.friends equal to the new friends array\n      this.setState({ friends });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    } else {\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n\n      // restart the guess counter\n      correctGuesses = 0;\n\n      // Egg on the user to play again\n      clickMessage = \"Wow you did it! That's worthy of a party.\";\n      bestScore = 12;\n      this.setState({ bestScore });\n\n      for (let i = 0; i < friends.length; i++) {\n        friends[i].clicked = false;\n      }\n\n      // Shuffle the array to be rendered in a random order\n      friends.sort(function(a, b) {\n        return 0.5 - Math.random();\n      });\n\n      // Set this.state.friends equal to the new friends array\n      this.setState({ friends });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    }\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Headertest></Headertest>\n        <Title>\n          <p>{clickMessage}</p>\n          <p>Current Score: {correctGuesses} </p>\n          <p>High Score: {bestScore}</p>\n        </Title>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            didAClick={this.didAClick}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}